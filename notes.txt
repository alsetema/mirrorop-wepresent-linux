passcode used was 5128

Ports used, and apparent purpose:
    - 389: unclear, maybe some kind of "initial check", or legacy? Could also be required to associate/enable a client to be connected on port 515
    - 515: authentication-like handshake (with SenderId/UID obtained from connection to 3268), followed by h.264 stream, acknowledged by serverside using "wppibXXXX" packets
    - 1234: see 398
    - 1688: some kind of audio stream, perhaps? Seems legacy, as h.264 includes audio
    - 3268: log in using code, obtain UID, exchange information and some sort of command and control protocol
    - 6542: see 398
    - 8080: legacy/alternative to 515, also begins with "wppibXXXX" from serverside
    - 31865: unused

Streaming works by sending an h.264 stream to port 515, but prefixed by a handshake, can be found by looking for h.264 stream start with 0000 0001 0605 ffff bytes.

The handshake starts with the client receiving "wppib" followed by some bytes, after which the client sends "SenderId", followed by the ID that was received as part of the login handshake, and bytes to pad the length of the packet to 32 (MUST VERIFY THIS CLAIM). 

In the login/command and control stream (to port 3268), commands seem to be prefixed by "wppcmd", and then three bytes indicating the command that is to be executed. 
Other command strings are wppaliveROCK and wppaliveROLL, which seem to act as a ping-pong/keepalive mechanism.

Known commands (port 3268):
    Serverbound (from client):
        - wppaliveROCK
            "ping"
        - wppcmd \x00 \x00 \x90
            Request info?
        - wppcmd \x00 \x00 \x80
            Request padding data/statistics?
        - wppcmd \x00 \x00 \x92 <data>
            Identify and authenticate 
            Data: 
                48 bytes of name string, NULL terminated
                4 bytes of unknown data (possibly length/checksum indicators)
                4 byte authentication code in ASCII (may possibly extend up to 8 bytes)
                64 or 72 bytes of unknown data (length depends on authentication number)
            Client terminates and reconnects after sending this 1st time
        - wppcmd \x00 \x00 \xb2
            Request UID (this may require \x00 \x00 \x92 to be successful on the same connection before yielding a valid response)
        - wppcmd \x00 \x00 \xc0 <data>
            Unclear, but contains "BS_DISABLE" at the end, may indicate ending/start of broadcast related activity
            (has no response)
            Sent right before the initial packet of data/handshake data to port 515
        - wppcmd \x00 \x00 \x88 \x80
            Unclear
            
    Clientbound (from server):
        - wppaliveROLL
            Response to wppaliveROCK
            "pong"
        - wppcmd \x00 \x00 \x91 <data>
            Response to wppcmd \x00 \x00 \x90
            Info response
            First some kind of data? Then the length of the following block of data, minus 1 byte for the length (39 = 40 - 1), followed by the name of the display as a string, prefixed by the length (in our case: 0x0c = 12 characters = length of name), so:
            0x27 0x0c <39 bytes of data, starting with <12 bytes of name data>>
              39   12 
        - wppcmd \x00 \x00 \x81
            Response to wppcmd \x00 \x00 \x80
            quite a bit of data, unclear purpose (but is the same accross multiple connections and requests)
        - wppcmd \x00 \x00 \x93 <1 byte>
            Response to wppcmd \x00 \x00 \x92
            Authentication successful
            byte is a boolean value. 1 = code was correct, 2 = code is incorrect
        - wppcmd \x00 \x00 \xb3 <4 bytes of data>
            response to wppcmd \x00 \x00 \xb2
            data is 4 byte LSB-ordered 32 bit integer representing UID
        - wppcmd \x00 \x00 \x89 <1 byte (data ?)>
            Response to wppcmd \x00 \x00 \x88
            
Know commands (port 515):
    Actually not just h264, but most likely Awind Protocol
    Serverbound (from client):
        - SenderId <4 bytes of data> <padded to 32 bytes)
            Data is 32 bit LSB integer, representing UID, as received in handshake (see  wppcmd \x00 \x00 \xb3/\xb2)
        - AWINDIB <data> IBTAIL
            Total 46 bytes of header data per frame (AWINDIB + other stuff)
            After AWINDIB, 15 bytes (maybe 16) of some kind of static data (protocol version?), the same for each frame transmitted
            At index 29, the length of the current frame (excluding tail) is included as a 32 bit MSB integer, repeated twice
            Tail starts with a 4-byte MSB frame counter at 42 bytes from the end (how many awind frames) and ends with IBTAIL
    Clientbound (from server):
        - wppib \x00 \x00 \x10 <4 bytes of data>
            Some kind of frame/transmission tracker
            Data is a 32 bit MSB integer            
